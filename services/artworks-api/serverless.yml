service: artcenter-app-artworks-api

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom: ${file(../../serverless.common.yml):custom}

# Create an optimized package for our functions
package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}
    tableName: ${self:custom.stage}-ext-artworks

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      #
      # is the table resource below is where we get the table name?
      # NOPE - seems like the tablename is hardcoded :P
      Resource:
        - 'Fn::ImportValue': ${self:custom.resourcesStage}-ExtArtworksTableArn

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /artworks
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: artworks
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /artworks/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: artworks/{id}
          method: get
          cors: true
          authorizer: aws_iam      
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /artworks
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: artworks
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /artworks/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: artworks/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /artworks/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: artworks/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}

  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.stage}-ExtApiGatewayRestApiId
    
      ApiGatewayRestApiRootResourceId:
        Value:
           Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId 
        Export:
          Name: ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
